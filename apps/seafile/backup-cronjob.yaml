apiVersion: batch/v1
kind: CronJob
metadata:
  name: seafile-mysql-backup
  namespace: seafile
spec:
  schedule: "0 3 * * *" # 3 AM daily (1 hour after garden backup)
  timeZone: "Europe/Berlin"
  jobTemplate:
    spec:
      template:
        spec:
          nodeSelector:
            workload-type: arm
          restartPolicy: OnFailure
          serviceAccountName: seafile-backup-sa
          securityContext:
            runAsUser: 0 # Run as root to have write access to backup volume
            runAsGroup: 0
            fsGroup: 0
          containers:
            - name: backup
              image: bitnami/kubectl:latest
              command: ["sh", "-c"]
              args:
                - |
                  set -e  # Exit on any error

                  # Get the MySQL pod name
                  POD_NAME=$(kubectl get pods -n seafile -l app=seafile-mysql -o jsonpath='{.items[0].metadata.name}')

                  if [ -z "$POD_NAME" ]; then
                    echo "No MySQL pod found"
                    exit 1
                  fi

                  echo "Creating backup from MySQL pod: $POD_NAME"

                  # Create backup directory with timestamp
                  TIMESTAMP=$(date +%Y%m%d-%H%M%S)
                  BACKUP_DIR="/tmp/seafile-mysql-backup-${TIMESTAMP}"
                  mkdir -p "$BACKUP_DIR"

                  # Get MySQL credentials from secrets
                  echo "Getting MySQL credentials..."
                  MYSQL_ROOT_PASSWORD=$(kubectl get secret -n seafile seafile-mysql-password -o jsonpath='{.data.MYSQL_ROOT_PASSWORD}' | base64 -d)

                  # Test MySQL connection first
                  echo "Testing MySQL connection..."
                  kubectl exec -n seafile "$POD_NAME" -- mariadb -u root -p"$MYSQL_ROOT_PASSWORD" -e "SELECT 1" > /dev/null

                  # Backup all three Seafile databases
                  echo "Backing up ccnet_db..."
                  kubectl exec -n seafile "$POD_NAME" -- mariadb-dump -u root -p"$MYSQL_ROOT_PASSWORD" \
                    --single-transaction --routines --triggers \
                    ccnet_db > "${BACKUP_DIR}/ccnet_db.sql"

                  echo "Backing up seafile_db..."
                  kubectl exec -n seafile "$POD_NAME" -- mariadb-dump -u root -p"$MYSQL_ROOT_PASSWORD" \
                    --single-transaction --routines --triggers \
                    seafile_db > "${BACKUP_DIR}/seafile_db.sql"

                  echo "Backing up seahub_db..."
                  kubectl exec -n seafile "$POD_NAME" -- mariadb-dump -u root -p"$MYSQL_ROOT_PASSWORD" \
                    --single-transaction --routines --triggers \
                    seahub_db > "${BACKUP_DIR}/seahub_db.sql"

                  # Create a restore script
                  echo "Creating restore script..."
                  cat > "${BACKUP_DIR}/restore.sh" << 'EOF'
                  #!/bin/bash
                  # Seafile MySQL Database Restore Script
                  # Usage: ./restore.sh <mysql_root_password>

                  if [ $# -ne 1 ]; then
                    echo "Usage: $0 <mysql_root_password>"
                    exit 1
                  fi

                  MYSQL_ROOT_PASSWORD="$1"

                  echo "Restoring ccnet_db..."
                  mariadb -u root -p"$MYSQL_ROOT_PASSWORD" ccnet_db < ccnet_db.sql

                  echo "Restoring seafile_db..."
                  mariadb -u root -p"$MYSQL_ROOT_PASSWORD" seafile_db < seafile_db.sql

                  echo "Restoring seahub_db..."
                  mariadb -u root -p"$MYSQL_ROOT_PASSWORD" seahub_db < seahub_db.sql

                  echo "Database restore completed successfully!"
                  EOF

                  chmod +x "${BACKUP_DIR}/restore.sh"

                  # Create backup metadata
                  echo "Creating backup metadata..."
                  cat > "${BACKUP_DIR}/backup_info.txt" << EOF
                  Seafile MySQL Backup Information
                  ================================
                  Backup Date: $(date)
                  Backup Timestamp: ${TIMESTAMP}
                  MySQL Pod: ${POD_NAME}
                  Databases: ccnet_db, seafile_db, seahub_db
                  
                  Files included:
                  - ccnet_db.sql: Core Seafile configuration database
                  - seafile_db.sql: File system metadata database  
                  - seahub_db.sql: Web interface database
                  - restore.sh: Automated restore script
                  - backup_info.txt: This information file
                  
                  Restore Instructions:
                  1. Extract the backup archive
                  2. Run: ./restore.sh <mysql_root_password>
                  EOF

                  # Verify all backup files exist
                  for db in ccnet_db seafile_db seahub_db; do
                    if [ ! -f "${BACKUP_DIR}/${db}.sql" ]; then
                      echo "Failed to create backup for ${db}"
                      exit 1
                    fi
                    echo "${db} backup created successfully ($(du -h ${BACKUP_DIR}/${db}.sql | cut -f1))"
                  done

                  # Compress backup
                  echo "Compressing backup..."
                  tar -czf "${BACKUP_DIR}.tar.gz" -C /tmp "$(basename $BACKUP_DIR)"

                  # Ensure backup directory exists and has correct permissions
                  mkdir -p /backups/seafile-mysql
                  chmod 755 /backups/seafile-mysql

                  # Copy to backup storage
                  echo "Storing backup..."
                  cp "${BACKUP_DIR}.tar.gz" "/backups/seafile-mysql/seafile-mysql-backup-${TIMESTAMP}.tar.gz"

                  # Verify backup was stored
                  if [ -f "/backups/seafile-mysql/seafile-mysql-backup-${TIMESTAMP}.tar.gz" ]; then
                    echo "Backup stored successfully: seafile-mysql-backup-${TIMESTAMP}.tar.gz ($(du -h /backups/seafile-mysql/seafile-mysql-backup-${TIMESTAMP}.tar.gz | cut -f1))"
                  else
                    echo "Failed to store backup"
                    exit 1
                  fi

                  # Clean up old backups (keep last 14 days for database backups)
                  echo "Cleaning up old backups..."
                  find /backups/seafile-mysql -name "seafile-mysql-backup-*.tar.gz" -mtime +14 -delete 2>/dev/null || true

                  # Show current backups
                  echo "Current backups:"
                  ls -lah /backups/seafile-mysql/seafile-mysql-backup-*.tar.gz 2>/dev/null || echo "No backups found"

                  echo "Seafile MySQL backup process completed successfully"

                  # Cleanup temp files
                  rm -rf "$BACKUP_DIR" "${BACKUP_DIR}.tar.gz"
              volumeMounts:
                - name: backup-storage
                  mountPath: /backups
          volumes:
            - name: backup-storage
              persistentVolumeClaim:
                claimName: seafile-mysql-backup-storage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: seafile-backup-sa
  namespace: seafile
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: seafile-backup-role
  namespace: seafile
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: seafile-backup-binding
  namespace: seafile
subjects:
  - kind: ServiceAccount
    name: seafile-backup-sa
    namespace: seafile
roleRef:
  kind: Role
  name: seafile-backup-role
  apiGroup: rbac.authorization.k8s.io