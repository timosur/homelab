apiVersion: batch/v1
kind: CronJob
metadata:
  name: garden-db-backup
  namespace: garden
spec:
  schedule: "0 2 * * *"  # 2 AM daily
  timeZone: "Europe/Berlin"
  jobTemplate:
    spec:
      template:
        spec:
          nodeSelector:
            workload-type: arm
          restartPolicy: OnFailure
          serviceAccountName: garden-backup-sa
          containers:
          - name: backup
            image: bitnami/kubectl:latest
            command: ['sh', '-c']
            args:
              - |
                # Get the backend pod name
                POD_NAME=$(kubectl get pods -n garden -l app=garden-backend -o jsonpath='{.items[0].metadata.name}')
                
                if [ -z "$POD_NAME" ]; then
                  echo "No backend pod found"
                  exit 1
                fi
                
                echo "Creating backup from pod: $POD_NAME"
                
                # Create backup directory with timestamp
                BACKUP_DIR="/tmp/backup-$(date +%Y%m%d-%H%M%S)"
                mkdir -p "$BACKUP_DIR"
                
                # Copy database from pod
                kubectl cp "garden/${POD_NAME}:/app/db/database.db" "${BACKUP_DIR}/database.db"
                
                # Compress backup
                tar -czf "${BACKUP_DIR}.tar.gz" -C /tmp "$(basename $BACKUP_DIR)"
                
                # Upload to storage (you could add S3, Azure Blob, etc.)
                # For now, just copy to a backup PVC
                mkdir -p /backups
                cp "${BACKUP_DIR}.tar.gz" /backups/
                
                # Clean up old backups (keep last 7 days)
                find /backups -name "backup-*.tar.gz" -mtime +7 -delete
                
                echo "Backup completed: ${BACKUP_DIR}.tar.gz"
                
                # Cleanup temp files
                rm -rf "$BACKUP_DIR" "${BACKUP_DIR}.tar.gz"
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: garden-backup-storage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: garden-backup-sa
  namespace: garden
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: garden-backup-role
  namespace: garden
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: garden-backup-binding
  namespace: garden
subjects:
- kind: ServiceAccount
  name: garden-backup-sa
  namespace: garden
roleRef:
  kind: Role
  name: garden-backup-role
  apiGroup: rbac.authorization.k8s.io
