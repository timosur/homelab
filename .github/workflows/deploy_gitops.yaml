name: Deploy GitOps

on:
  workflow_dispatch:
  
jobs:
  bootstrap_gitops:
    runs-on: ubuntu-latest

    environment:
      name: production

    steps:
      - uses: actions/checkout@v5

      - uses: hashicorp/setup-terraform@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Get kubeconfig from Terraform Cloud
        run: |
          # Get kubeconfig from Terraform Cloud
          cd infrastructure
          export TF_TOKEN_app_terraform_io=$TCLOUD_TOKEN
          terraform init
          terraform output -raw kubeconfig > k3s_kubeconfig.yaml

          # Set kubeconfig for subsequent steps
          echo "KUBECONFIG=$(pwd)/k3s_kubeconfig.yaml" >> $GITHUB_ENV
        env:
          TCLOUD_TOKEN: ${{ secrets.TCLOUD_TOKEN }}

      - name: Wait for ArgoCD to be ready
        run: |
          echo "Waiting for ArgoCD to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd || echo "ArgoCD not ready yet"
          kubectl wait --for=condition=ready --timeout=300s pod -l app.kubernetes.io/name=argocd-server -n argocd || echo "ArgoCD server pod not ready"
          kubectl wait --for=condition=ready --timeout=300s pod -l app.kubernetes.io/name=argocd-repo-server -n argocd || echo "ArgoCD repo server pod not ready"

      - name: Setup Azure Key Vault and External Secrets
        run: |
          echo "Setting up Azure Key Vault and External Secrets integration..."
          
          # Create external-secrets-system namespace
          kubectl create namespace external-secrets-system --dry-run=client -o yaml | kubectl apply -f -
          
          # Validate required Azure credentials are provided
          if [ -z "${{ secrets.AZURE_SP_CLIENT_ID }}" ] || [ -z "${{ secrets.AZURE_SP_CLIENT_SECRET }}" ]; then
            echo "Error: AZURE_SP_CLIENT_ID and AZURE_SP_CLIENT_SECRET must be set in GitHub secrets"
            exit 1
          fi
          
          echo "Creating Kubernetes secret with Azure Service Principal credentials..."
          
          # Create the Kubernetes secret for Azure authentication
          kubectl create secret generic azure-secret \
            --namespace=external-secrets-system \
            --from-literal=ClientID="${{ secrets.AZURE_SP_CLIENT_ID }}" \
            --from-literal=ClientSecret="${{ secrets.AZURE_SP_CLIENT_SECRET }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Azure Service Principal secret created successfully"

      - name: Configure ArgoCD Repository
        run: |
          echo "Configuring ArgoCD repository connection..."

          # Create repository configuration for public HTTPS repo
          cat <<EOF | kubectl apply -f - || echo "Failed to create repository configuration"
          apiVersion: v1
          kind: Secret
          metadata:
            name: homelab-repo
            namespace: argocd
            labels:
              argocd.argoproj.io/secret-type: repository
          type: Opaque
          stringData:
            type: git
            url: https://github.com/timosur/homelab.git
          EOF

          echo "Repository configuration completed."

      - name: Deploy Root ArgoCD Application
        run: |
          echo "Deploying root ArgoCD application..."

          # Wait a bit for ArgoCD to process the repository
          sleep 30

          # Deploy root app
          kubectl apply -f apps/root.yaml || echo "Root app deployment failed"

          echo "GitOps bootstrap completed. ArgoCD should now be connected to your repository."
          echo "Check ArgoCD UI for status."

      - name: Verify External Secrets setup
        run: |
          echo "Verifying External Secrets configuration..."
          
          # Wait for External Secrets Operator to be ready
          echo "Waiting for External Secrets Operator..."
          kubectl wait --for=condition=available deployment/external-secrets \
            --namespace=external-secrets-system \
            --timeout=300s || echo "External Secrets Operator not ready yet"
          
          # Check ClusterSecretStore status
          echo "Checking ClusterSecretStore status..."
          kubectl get clustersecretstore azure-keyvault-store -o yaml || echo "ClusterSecretStore not found"
          
          # Check if External Secrets are created
          echo "Checking ExternalSecrets in mealie namespace..."
          kubectl get externalsecrets -n mealie || echo "No ExternalSecrets found yet"
          
          # Check if secrets are created
          echo "Checking secrets in mealie namespace..."
          kubectl get secrets -n mealie || echo "Mealie namespace not ready yet"
          
          echo "External Secrets verification completed"
