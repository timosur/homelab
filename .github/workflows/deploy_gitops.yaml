name: Deploy GitOps

on:
  workflow_dispatch:

jobs:
  bootstrap_gitops:
    runs-on: ubuntu-latest

    environment:
      name: production

    steps:
      - uses: actions/checkout@v5

      - uses: hashicorp/setup-terraform@v3



      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Get kubeconfig from Terraform Cloud
        run: |
          # Get kubeconfig from Terraform Cloud
          cd infrastructure
          export TF_TOKEN_app_terraform_io=$TCLOUD_TOKEN
          terraform init
          terraform output -raw kubeconfig > k3s_kubeconfig.yaml
          
          # Set kubeconfig for subsequent steps
          echo "KUBECONFIG=$(pwd)/k3s_kubeconfig.yaml" >> $GITHUB_ENV
        env:
          TCLOUD_TOKEN: ${{ secrets.TCLOUD_TOKEN }}

      - name: Wait for ArgoCD to be ready
        run: |
          echo "Waiting for ArgoCD to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd || echo "ArgoCD not ready yet"
          kubectl wait --for=condition=ready --timeout=300s pod -l app.kubernetes.io/name=argocd-server -n argocd || echo "ArgoCD server pod not ready"
          kubectl wait --for=condition=ready --timeout=300s pod -l app.kubernetes.io/name=argocd-repo-server -n argocd || echo "ArgoCD repo server pod not ready"

      - name: Configure ArgoCD Repository
        run: |
          echo "Configuring ArgoCD repository connection..."
          
          # Create repository configuration for public HTTPS repo
          cat <<EOF | kubectl apply -f - || echo "Failed to create repository configuration"
          apiVersion: v1
          kind: Secret
          metadata:
            name: homelab-repo
            namespace: argocd
            labels:
              argocd.argoproj.io/secret-type: repository
          type: Opaque
          stringData:
            type: git
            url: https://github.com/timosur/homelab.git
          EOF
          
          echo "Repository configuration completed."

      - name: Apply Gateway API CRDs
        run: |
          echo "Applying Gateway API CRDs..."
          kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.0.0/standard-install.yaml
          
          echo "Waiting for Gateway API CRDs to be established..."
          kubectl wait --for condition=established --timeout=60s crd/gatewayclasses.gateway.networking.k8s.io
          kubectl wait --for condition=established --timeout=60s crd/gateways.gateway.networking.k8s.io
          kubectl wait --for condition=established --timeout=60s crd/httproutes.gateway.networking.k8s.io
          kubectl wait --for condition=established --timeout=60s crd/referencegrants.gateway.networking.k8s.io
          
          echo "Applying Gateway API resources..."
          kubectl apply -f bootstrap/gateway-api/gateway-class.yaml

      - name: Deploy Root ArgoCD Application
        run: |
          echo "Deploying root ArgoCD application..."
          
          # Wait a bit for ArgoCD to process the repository
          sleep 30
          
          # Deploy root app
          kubectl apply -f apps/root.yaml || echo "Root app deployment failed"
          
          echo "GitOps bootstrap completed. ArgoCD should now be connected to your repository."
          echo "Check ArgoCD UI for status."
